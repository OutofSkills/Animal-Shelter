@page "/animaloverview"
@using AnimalShelter.Shared
@using AnimalShelter.Client.Services
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]

@if (!AnimalsInShelter.Any())
{
    <div class="spinner-border" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}
else
{
    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 row-cols-xl-5">
        <!--Display the list of animals-->
        @foreach (var animal in AnimalsInShelter)
        {
            <div class="col mv-4">
                <AnimalCard CurrentAnimal="animal" OnAnimalAdopted="AdoptAnimal" /> <!--Using the component AnimalCard-->
            </div>

        }
    </div>

    <button class="btn btn-primary" @onclick="AddAnimal">Add Animal</button>
}

@code {
    private List<Animal> AnimalsInShelter { get; set; } = new List<Animal>();

    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    [Inject]
    private NavigationManager NavManager { get; set; }

    [Inject]
    public IAnimalService AnimalService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AnimalsInShelter = await AnimalService.GetAllAnimals();

    }

    private async Task AdoptAnimal(Animal animalToAdopt)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
                $"Are you sure you want {animalToAdopt.Name} to be adopted?");

        if (confirmed)
        {
            ///Delete an Animal from the list
            await AnimalService.AdoptAnimal(animalToAdopt);

            AnimalsInShelter = await AnimalService.GetAllAnimals();
        }
    }

    private void AddAnimal()
    {
        NavManager.NavigateTo("/animaldetail");
    }
}
